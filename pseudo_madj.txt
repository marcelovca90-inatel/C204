// a) criar um grafo vazio
int[][] criarGrafo(int n)
{
    int madj[n][n];
    for (int i=0; i<n; i++)
        for (int j=0; j<n; j++)
            madj[i][j] = 0; // ou NULL
    return madj;
}

// b) verificar se existe uma aresta ligando dois vÃ©rtices
bool existeConexao(int madj[][], int u, int v)
{
    return (madj[u][v] != 0); // ou NULL
}

// c) inserir uma aresta com peso no grafo
void inserirAresta(int madj[][], int u, int v, int w, bool direcionado)
{
    madj[u][v] = w;
    if (!direcionado)
        madj[v][u] = w;
}

// d) obter a aresta de maior peso de um grafo ponderado com pesos distintos

// retornando somente o peso -> w
int arestaDeMaiorPeso(int madj[][])
{
    int maior = -INFINITY;
    for (int i=0; i<n; i++)
        for (int j=0; j<n; j++)
            if (madj[i][j] > maior)
                maior = madj[i][j];
    return maior;
}

// retornando a aresta -> (u,v)
pair<int,int> arestaDeMaiorPeso(int madj[][])
{
    int maior = -INFINITY;
    pair<int,int> ans;
    for (int i=0; i<n; i++)
        for (int j=0; j<n; j++)
            if (madj[i][j] > maior)
            {
                maior = madj[i][j];
                ans = make_pair(i,j);
            }
    return ans;
}

// retornando a aresta e o peso -> ((u,v),w)
pair<pair<int,int>,int> arestaDeMaiorPeso(int madj[][])
{
    int maior = -INFINITY;
    pair<pair<int,int>,int> ans;
    for (int i=0; i<n; i++)
        for (int j=0; j<n; j++)
            if (madj[i][j] > maior)
            {
                maior = madj[i][j];
                ans = make_pair(make_pair(i,j),maior);
            }
    return ans;
}
